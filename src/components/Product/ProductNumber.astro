---
import ButtonCopy from '../ButtonCopy.vue';
import useFormatProductNumber from '../../utils/product/useFormatProductNumber';

const {
  productNumber,
  copyDisabled = false,
  isPdp = false,
  small = false,
  big = false,
  class: customClass = '',
  buttonTexts = { copy: "Copy", copied: "Copied" },
} = Astro.props;

// Use formatted product number using a helper function
const { formattedNumbers: formatted } = useFormatProductNumber(productNumber);

// Define classes dynamically
const classNames = [
  'product-number',
  big ? 'text-4.5' : 'number-big',
  customClass,
].filter(Boolean).join(' ');

const trackingClass = small ? 'tracking-wide' : 'tracking-tight';

// Determine wrapper tags based on `isPdp`
const ProductWrapper = isPdp ? 'h2' : 'div';
const FormattedWrapper = isPdp ? 'h3' : 'div';
---

{productNumber && formatted && (
  <div class={classNames}>
    <div class={['p-number', small ? 'w-full' : ''].join(' ')} itemprop="identifier">
      <ProductWrapper id={productNumber} class="product-code">
        {productNumber}
      </ProductWrapper>

      {big && (
        <ButtonCopy
          productNumber={productNumber}
          texts={buttonTexts}
          tooltipClasses=""
          client:only="vue"
        />
      )}
    </div>

    <div class={['code-formatted', trackingClass].join(' ')}>
      <div class="relative inset-0" data-pagefind-ignore>
        {formatted.dot}
      </div>
      <div class="absolute inset-0" data-pagefind-ignore>
        {formatted.dash}
      </div>
      <FormattedWrapper class="number-secondary">
        {formatted.standard}
      </FormattedWrapper>
    </div>
  </div>
)}
