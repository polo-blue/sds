---
import CategorySidebarToggler from './CategorySidebarToggler.vue';
import CategoryViewToggler from './CategoryViewToggler.astro';
import { Icon } from 'astro-icon/components';
import { t } from "i18next";

const { category, subcategory, subtitle, subsubtitle, titleSmall, locale, showViewToggler, viewerLabels } = Astro.props;

// Compute base URL for localization
const baseURL = locale === 'en' ? '' : `/${locale}`;

---

<div 
  ref="el"
  class="flex flex-nowrap items-center pr-3 sm:pb-3 sm:pt-4 md:pl-4 relative z-10-off bg-neutral-lightest md:bg-white"
  transition:name="category-details"
  transition:animate="fade"
>
<CategorySidebarToggler onclick="toggleSidebar()" client:load>
  <!-- First icon - visible only on desktop when sidebar is expanded -->
  <Icon 
    name="ant-design:menu-fold-outlined" 
    class="toggler-btn hidden md:[&:not(.hidden)]:block" 
    aria-hidden="true"
  />
  <!-- Second icon - visible only on desktop when sidebar is collapsed -->
  <Icon 
    name="ant-design:menu-unfold-outlined" 
    class="toggler-btn hidden md:[&:not(.hidden)]:block" 
    aria-hidden="true"
  />
  <!-- Mobile icon -->
  <Icon 
    name="ant-design:menu-outlined" 
    class="toggler-btn block md:hidden" 
    aria-hidden="true"
  />
</CategorySidebarToggler>

  <div class="overflow-x-auto overflow-y-hidden flex max-w-full items-center">
    {subtitle ? (
      <>
        <a class="text-lg font-vw-headregular whitespace-nowrap block" href={`${baseURL}/${category.slug}/`}>
          {category.name}
          {titleSmall && <small>{titleSmall}</small>}
        </a>
        <span class="text-neutral-lighter text-lg inline-block px-1 font-headlight">/</span>
        {!subsubtitle ? (
          <h1 class="text-lg py-2.5 sm:py-0 whitespace-nowrap underline underline-offset-6 decoration-blue-300 decoration-0.5">
            {subtitle} <span class="sr-only"> {t('catalog.extra-short')}</span>
          </h1>
        ) : (
          <>
            <div class="text-lg py-2.5 sm:py-0 whitespace-nowrap ">
              <a href={`${baseURL}/${category.slug}/${subcategory.slug}/`}>
                {subtitle}
              </a>
            </div>
            <span class="text-neutral-lighter text-lg inline-block px-1 font-headlight">/</span>
            <h1 class="text-lg py-2.5 sm:py-0 whitespace-nowrap underline underline-offset-6 decoration-blue-300 decoration-0.5">
              {subsubtitle} <span class="sr-only"> {t('catalog.extra-short')}</span>
            </h1>
          </>
        )}
      </>
    ) : (
      <h1 class="text-lg py-2.5 sm:py-0 whitespace-nowrap">
        {category.name}
        {titleSmall && <small>{titleSmall}</small>}
        <span class="sr-only"> {t('catalog.extra-short')}</span>
      </h1>
    )}
  </div>

  <CategoryViewToggler {...viewerLabels} showViewToggler={showViewToggler}  class="hidden md:flex items-center gap-2 ml-auto" />
</div>

<script is:inline>
  function toggleSidebar() {
    const sidebar = document.getElementById('sidebar');
    const togglers = document.querySelectorAll('.toggler-btn');
    const isMobile = window.matchMedia("(max-width: 768px)").matches;

    if (sidebar) {
      if (isMobile) {
        // On mobile just toggle classes without localStorage
        document.body.classList.toggle('overflow-hidden');
        sidebar.classList.toggle('show');
      } else {
        // On desktop save the state
        document.body.classList.remove('overflow-hidden');
        sidebar.classList.toggle('collapsed');
        localStorage.setItem('sidebarState', sidebar.classList.contains('collapsed') ? 'closed' : 'open');
        
        // Toggle visibility of buttons on desktop
        togglers.forEach(btn => btn.classList.toggle('hidden'));
      }
    }
  }

  function handlePageLoad() {
    const sidebar = document.getElementById('sidebar');
    const togglers = document.querySelectorAll('.toggler-btn');
    const isMobile = window.matchMedia("(max-width: 768px)").matches;
    
    if (sidebar && !isMobile) {
      const savedState = localStorage.getItem('sidebarState');
      
      if (savedState === 'open') {
        sidebar.classList.remove('collapsed');
        // Show correct button on desktop
        if (togglers.length >= 2) {
          togglers[0].classList.remove('hidden'); // menu-fold
          togglers[1].classList.add('hidden');    // menu-unfold
        }
      } else if (savedState === 'closed') {
        sidebar.classList.add('collapsed');
        // Show correct button on desktop
        if (togglers.length >= 2) {
          togglers[0].classList.add('hidden');    // menu-fold
          togglers[1].classList.remove('hidden'); // menu-unfold
        }
      }
    }
  }

  // Remove previous listener if exists
  document.removeEventListener('astro:page-load', handlePageLoad);
  // Add new listener
  document.addEventListener('astro:page-load', handlePageLoad);
  
  // Initial call to set up the initial state
  handlePageLoad();
</script>