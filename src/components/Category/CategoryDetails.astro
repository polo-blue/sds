---
import CategorySidebarToggler from './CategorySidebarToggler.vue';
import CategoryViewToggler from './CategoryViewToggler.astro';
import { Icon } from 'astro-icon/components';
import { t } from "i18next";

const { 
  category, 
  subcategory, 
  subtitle, 
  subsubtitle, 
  titleSmall, 
  locale, 
  showViewToggler, 
  viewerLabels 
} = Astro.props;

const baseURL = locale === 'en' ? '' : `/${locale}`;
---

<div 
  class="flex flex-nowrap items-center pr-3 sm:pb-3 sm:pt-4 md:pl-4 relative z-10-off bg-neutral-lightest md:bg-white"
  transition:name="category-details"
  transition:animate="fade"
>
  <CategorySidebarToggler onclick="toggleSidebar()">
    <!-- Desktop expanded -->
    <Icon 
      name="ant-design:menu-fold-outlined" 
      class="toggler-btn md:[&:not(.hidden)]:block" 
      aria-hidden="true"
    />
    <!-- Desktop collapsed -->
    <Icon 
      name="ant-design:menu-unfold-outlined" 
      class="toggler-btn hidden md:[&:not(.hidden)]:block" 
      aria-hidden="true"
    />
    <!-- Mobile icon -->
    <Icon 
      name="ant-design:menu-outlined" 
      class="toggler-btn block md:hidden" 
      aria-hidden="true"
    />
  </CategorySidebarToggler>

  <!-- Rest of the existing template code -->

  { showViewToggler && (
    <CategoryViewToggler 
      {...viewerLabels}  
      class="hidden lg:flex items-center gap-2 ml-auto" 
    /> 
  )}
</div>

<script>
  function initializeSidebar() {
    const sidebar = document.getElementById('sidebar');
    const savedState = localStorage.getItem('sidebarState') || 'open';
    
    if (sidebar) {
      sidebar.classList.toggle('collapsed', savedState === 'closed');
      
      const togglers = document.querySelectorAll('.toggler-btn');
      if (togglers.length >= 2) {
        const isCollapsed = savedState === 'closed';
        togglers[0].classList.toggle('hidden', isCollapsed);
        togglers[1].classList.toggle('hidden', !isCollapsed);
      }
    }
  }
  
  function toggleSidebar() {
    const sidebar = document.getElementById('sidebar');
    const togglers = document.querySelectorAll('.toggler-btn');
    const isMobile = window.matchMedia("(max-width: 768px)").matches;
  
    if (sidebar) {
      if (isMobile) {
        const isShown = sidebar.classList.toggle('show');
        document.body.classList.toggle('overflow-hidden', isShown);
      } else {
        const isCollapsed = sidebar.classList.toggle('collapsed');
        document.body.classList.remove('overflow-hidden');
        localStorage.setItem('sidebarState', isCollapsed ? 'closed' : 'open');
        
        if (togglers.length >= 2) {
          togglers[0].classList.toggle('hidden', isCollapsed);
          togglers[1].classList.toggle('hidden', !isCollapsed);
        }
      }
    }
  }

  // Initialize on every page load to maintain state during navigation
  document.addEventListener('astro:page-load', initializeSidebar);
  
  // Initialize on initial page load
  document.addEventListener('DOMContentLoaded', initializeSidebar);
  
  // Handle state during view transitions
  document.addEventListener('astro:before-swap', () => {
    const sidebarState = localStorage.getItem('sidebarState');
    if (sidebarState) {
      // Store state temporarily during transition
      sessionStorage.setItem('tempSidebarState', sidebarState);
    }
  });
  
  document.addEventListener('astro:after-swap', () => {
    const tempState = sessionStorage.getItem('tempSidebarState');
    if (tempState) {
      // Restore state after transition
      localStorage.setItem('sidebarState', tempState);
      sessionStorage.removeItem('tempSidebarState');
      initializeSidebar();
    }
  });
</script>

<style>
  .toggler-btn {
    @apply md:-mt-0.5;
  }
</style>