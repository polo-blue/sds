---
import { t } from "i18next";
import ButtonCopy from "./ButtonCopy.vue";

const {
  copyDisabled,
  productNumber,
  isPdp,
  small,
  big,
  class: className,
} = Astro.props;

const butonTexts = {
  copy: t("copy"),
  copied: t("copied"),
};

const isLetter = (string: string) => {
  return string.toLowerCase() !== string.toUpperCase();
};

const niceName = (string: string, separator = "\u00A0") => {
  let word = string; //e.g. to 6Q0947106EY20 .split('+')

  if (
    isLetter(string[0]) === true &&
    isLetter(string[1]) === false &&
    string.length === 9
  ) {
    // mainly liquids
    word = string
      .replace(
        /^(\w{1})(\w{3})(\w{3})(.*)$/,
        `$1${separator}$2${separator}$3${separator}$4`,
      )
      .replace(/(^\s+|\s+$)/, "");
  }

  // wheels / emblems e.g. 6R0601025AK8Z8 --> 6R0 601 025 AB 8Z8 || 6C0601025DFZZ --> 6C0 601 025 D FZZ || 6R0853433ADA1 -> 6R0 853 433 A DA1
  else if (string.length >= 13) {
    // console.log('part number: wheels / emblems', word)
    word = string
      .replace(
        /^(\w{3})(\w{3})(\w{3})(.*)(\w{3})$/,
        `$1${separator}$2${separator}$3${separator}$4${separator}$5`,
      )
      .replace(/(^\s+|\s+$)/, "");
  } else if (string.length > 12) {
    // accessories / mats
    word = string
      .replace(
        /^(\w{3})(\w{3})(\w{3})(\w{1})(.*)$/,
        `$1${separator}$2${separator}$3${separator}$4${separator}$5`,
      )
      .replace(/(^\s+|\s+$)/, "");
  } else {
    // other parts
    word = string
      .replace(/(\w{3})/g, `$1${separator}`)
      .replace(/(^\s+|\s+$)/, "");
  }

  return word.replace(" ", separator);
};
---

{
  productNumber !== null && (
    <div
      class={`product-number ${
        big ? "text-lg" : `text-sm ${className ? className : "mt-2 sm:mt-0"}`
      }`}
    >
      <div
        class={`inline-flex leading-none relative ${small ? "w-full" : ""}`}
        itemprop="identifier"
      >
        {isPdp ? (
          <h2 id={productNumber} class="product-code">
            {productNumber}
          </h2>
        ) : (
          <div id={productNumber} class="product-code">
            {productNumber}
          </div>
        )}

        {copyDisabled && (
          <ButtonCopy
            productNumber={String(productNumber)}
            texts={butonTexts}
            tooltipClasses=""
            client:only
          />
        )}
      </div>

      <div
        class={`code-formatted ${small ? "tracking-wide" : "tracking-tight"}`}
      >
        <div class="relative inset-0" data-pagefind-ignore>
          {niceName(productNumber, ".")}
        </div>
        <div class="absolute inset-0" data-pagefind-ignore>
          {niceName(productNumber, "-")}
        </div>
        {isPdp ? (
          <h3 class="number-secondary">{niceName(productNumber)}</h3>
        ) : (
          <div class="number-secondary">{niceName(productNumber)}</div>
        )}
      </div>
    </div>
  )
}
