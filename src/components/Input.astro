---
// Input.astro
interface Props {
  id: string;
  name?: string; 
  label: string;
  variant?: 'filled' | 'standard';
  type?: HTMLInputElement['type'] | 'textarea'; // support textarea
  value?: string;
  required?: boolean;
  rows?: number; // rows for textarea
  placeholder?: string; 
  class?: string; // additional classes
}

const {
  id,
  name,
  label,
  variant = 'standard',
  type = 'text',
  value = '',
  required = false,
  rows = 3, 
  placeholder = " ", //space for "floating label")
  class: additionalClasses = "", 
  ...restProps 
} = Astro.props;

// Common classes for both variants
const baseInputClasses = "block w-full text-4.5 text-blue-medium border-0 border-b-1 border-neutral-light appearance-none dark:text-white dark:border-gray-600 dark:focus:border-blue-lightest focus:outline-none focus:ring-0 focus:border-blue-medium peer";

const baseLabelClasses = "absolute text-sm text-slate-medium dark:text-neutral-default transform scale-75 origin-[0] peer-focus:text-blue-medium peer-focus:dark:text-blue-lightest peer-placeholder-shown:scale-100 peer-focus:scale-75 rtl:peer-focus:translate-x-1/4 rtl:peer-focus:left-auto transition-all duration-300 ease-in-out";

// Variant specific classes
const variantClasses = {
  filled: {
    wrapper: "relative",
    input: `${baseInputClasses} rounded-t-lg px-2.5 pb-2.5 pt-5 bg-gray-50 dark:bg-gray-700 ${additionalClasses}`,
    label: `${baseLabelClasses} -translate-y-4 top-4 z-10 start-2.5 peer-placeholder-shown:translate-y-0 peer-focus:-translate-y-4`
  },
  standard: {
    wrapper: "relative z-0",
    input: `${baseInputClasses} py-2.5 px-0 bg-transparent ${additionalClasses}`,
    label: `${baseLabelClasses} -translate-y-6 top-3 -z-10 peer-focus:start-0 peer-placeholder-shown:translate-y-0 peer-focus:-translate-y-6`
  }
};

const classes = variantClasses[variant];

// Dla textarea modyfikujemy nieco style
const textareaClasses = type === 'textarea' 
  ? classes.input.replace('border-b-1', 'border-1') + ' resize-none' 
  : classes.input;
---

<div class={classes.wrapper}>
  {type === 'textarea' ? (
    <textarea
      name={name}
      id={id}
      rows={rows}
      required={required}
      class={textareaClasses}
      placeholder={placeholder}
      {...restProps}
    >{value}</textarea>
  ) : (
    <input
      type={type}
      name={name}
      id={id}
      value={value}
      required={required}
      class={classes.input}
      placeholder={placeholder}
      {...restProps}
    />
  )}
  <label
    for={id}
    class={classes.label}
  >
    {label}
  </label>
</div>